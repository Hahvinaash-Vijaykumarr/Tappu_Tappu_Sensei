module music (
    input clk,  // clock
    input rst,  // reset
    input song_number[1],  // b0 or b1 for the 2 different songs
    input music_counter[16],  // music counter
    input song_speed[1],
    
    output speaker
  ) {  
  sig fullnote[8];
  sig octave[3];
  sig note[4];
  divide_by12 divby12(.clk(clk), .rst(rst), .numer(fullnote[5:0]));
  music_ROM music_ROM(.counter(music_counter[9:0]), .song_num(song_number));
  
  dff tone[31](.clk(clk), .rst(rst));
  dff clkdivider[9](.clk(clk), .rst(rst));
  dff counter_note[9](.clk(clk), .rst(rst));
  dff counter_octave[8](.clk(clk), .rst(rst));
  dff speaker_dff(.clk(clk), .rst(rst));
  
  always {
    tone.d = tone.q + 1;
    note[3:0] = divby12.remainder[3:0];
    octave[2:0] = divby12.quotient[2:0];
    speaker = speaker_dff.q;
    fullnote[7:0] = music_ROM.note[7:0];
    
    case(note) {
      0: clkdivider.d = 511;  // A
      1: clkdivider.d = 482;  // A#/Bb
      2: clkdivider.d = 455; // B
      3: clkdivider.d = 430; // C
      4: clkdivider.d = 405; // C#/Db
      5: clkdivider.d = 383; // D
      6: clkdivider.d = 361; // D#/Eb
      7: clkdivider.d = 341; // E
      8: clkdivider.d = 322; // F
      9: clkdivider.d = 303; // F#/Gb
      10: clkdivider.d = 286; // G
      11: clkdivider.d = 270; // G#/Ab
      default: clkdivider.d = 0;
    }
      
    // note
    if (counter_note.q == 0) {
      counter_note.d = clkdivider.q;
    }
    else {
      counter_note.d = counter_note.q - 1;
    }
    
    // octave  
    if (counter_note.q == 0) {
      if (counter_octave.q == 0) {
        counter_octave.d = 255 >> octave;
      }
      else {
        counter_octave.d = counter_octave.q - 1;
      }
    }
    
    // speaker
    if (song_speed == 1) {
      if ((counter_note.q == 0) && (counter_octave.q == 0) && (tone.q[21:18] != 0) && fullnote!= 0) {
        speaker_dff.d = ~speaker_dff.q;
      }
    }
    else if (song_speed == 0) {
      if ((counter_note.q == 0) && (counter_octave.q == 0) && (tone.q[20:18] != 0) && fullnote!= 0) {
        speaker_dff.d = ~speaker_dff.q;
      }
    }
      
  }
}

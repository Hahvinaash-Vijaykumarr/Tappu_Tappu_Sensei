module game_beta (
    input clk,  // clock
    input rst,  // reset
    
    input button_song[2],
    input button_speed[2],
    input button_ok[1],
    input button_keys[7],
    
    output speaker,
    output ledout,
    
    output song_number[2],
    output game_speed[2],
    
    output score[16]
  ) {
  
  // temporary var
  sig alu_a_in[16];
  sig alu_b_in[16];
  
  alu game_alu;
  
  .clk(clk) {
    .rst(rst) {
      game_Controlunit game_controlunit;
      game_Regfiles game_regfiles;
      music music;
      display display(#COLUMN_DIMENSION(16), #ROW_DIMENSION(16));
    }
  }
    
  
  always {
    // pass signal for button press to control unit
    game_controlunit.button_song = button_song;
    game_controlunit.button_speed = button_speed;
    game_controlunit.button_ok = button_ok;
    game_controlunit.button_keys = button_keys;
    
    // setting up REGFILE
    game_regfiles.we = game_controlunit.we_regfile;
    game_regfiles.write_address = game_controlunit.regfile_write_address;
    
    game_regfiles.read_address_a = game_controlunit.regfile_read_address_a;
    game_regfiles.read_address_b = game_controlunit.regfile_read_address_b;
    
    score = game_regfiles.score;

    // regfile detain for branching
    game_controlunit.regfile_datain_a = game_regfiles.out_a;
    game_controlunit.regfile_datain_b = game_regfiles.out_b;
    
    // reading speed and song selection
    game_speed = game_regfiles.speed_and_number[3:2];
    song_number = game_regfiles.speed_and_number[1:0];  
      
    // setting up display
    display.song_num = game_regfiles.song_num[1];
    display.address = game_regfiles.gcounter;
    ledout = display.outled;
    
    // setting up music -- 0 for slow, 1 for fast
    music.music_counter = game_regfiles.gcounter;
    music.song_speed = game_regfiles.speed_num[1];
    music.song_number = game_regfiles.song_num[1];
    speaker = music.speaker;
    
    // asel mux
    case (game_controlunit.asel) {
      b000: alu_a_in = game_regfiles.out_a;
      b001: alu_a_in = hC3FF;
      b010: alu_a_in = hFC3F;
      b011: alu_a_in = hFFC3;
      b100: alu_a_in = hFFFC;
      b101: alu_a_in = h3FFF;
      b110: alu_a_in = hFFFF;
      default: alu_a_in = 0;
    }
    
    // bsel mux
    case (game_controlunit.bsel) {
      b000: alu_b_in = game_regfiles.out_b;
      b001: alu_b_in = h0000;
      b010: alu_b_in = h0001;
      b011: alu_b_in = display.outled_0[31:16];
      b100: alu_b_in = display.outled_0[15:0];
      default: alu_b_in = 0;
    }
    
    // ALU
    game_alu.a = alu_a_in;
    game_alu.b = alu_b_in;
    game_alu.alufn_signal = game_controlunit.alufn;
    
    // wdsel mux
    case (game_controlunit.wdsel) {
      b01: game_regfiles.data = h0000;
      b10: game_regfiles.data = h0001;
      b11: game_regfiles.data = h0003;
      default: game_regfiles.data = game_alu.out;
    }
}

module au_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input usb_rx,           // USB->Serial input
    output usb_tx,          // USB->Serial output
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield (ANODE)
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8],     // DIP switches on IO Shield
    
    input io_song_button[2],
    input io_speed_button[2],
    input io_ok_button[1]
  ) {
  
  sig rst;
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;

    button_conditioner button_conditioner[5];
    //edge_detector btn_debug0(#RISE(1), #FALL(0));
    //edge_detector btn_debug1(#RISE(1), #FALL(0));
    
    //dff debug_button[1](.rst(rst), #INIT(0));
    button_conditioner btn_cond_song0;
    button_conditioner btn_cond_song1;
    edge_detector edge_dt_song0(#RISE(1), #FALL(0));
    edge_detector edge_dt_song1(#RISE(1), #FALL(0));
    
    button_conditioner btn_cond_speed0;
    button_conditioner btn_cond_speed1;
    edge_detector edge_dt_speed0(#RISE(1), #FALL(0));
    edge_detector edge_dt_speed1(#RISE(1), #FALL(0));
    
    button_conditioner btn_cond_ok;
    edge_detector edge_dt_ok(#RISE(1), #FALL(0));
    
    .rst(rst) {
      //game_Regfiles regfiles;
      game_beta game_unit;
    }
  }
  
  always {
    reset_cond.in = ~rst_n;   // input raw inverted reset signal
    rst = reset_cond.out;     // conditioned reset
    button_conditioner.in = io_button[4:0];
    
    led = c{3b0, io_button};  // connect buttons to LEDs to see which button is pressed
    
    usb_tx = usb_rx;          // loop serial port
    
    io_seg = 8b0; // connect segments to the driver
    io_sel = 4b1111; // turn on rightmost digit, and leftmost digit
    io_led = c{{8b0}, {8b0}, {8b0}};   
    
    btn_cond_song0.in = io_button[0];
    btn_cond_song1.in = io_button[1];
    edge_dt_song0.in = btn_cond_song0.out;
    edge_dt_song1.in = btn_cond_song1.out;
    
    btn_cond_speed0.in = io_button[2];
    btn_cond_speed1.in = io_button[3];
    edge_dt_speed0.in = btn_cond_speed0.out;
    edge_dt_speed1.in = btn_cond_speed1.out;
    
    btn_cond_ok.in = io_button[4];
    edge_dt_ok.in = btn_cond_ok.out[0];
    
    game_unit.button_song = c{edge_dt_song1.out, edge_dt_song0.out};
    game_unit.button_speed = c{edge_dt_speed1.out, edge_dt_speed0.out};
    game_unit.button_ok = edge_dt_ok.out;
    
    led[0] = game_unit.song_number[0];
    led[1] = game_unit.song_number[1];
    led[2] = game_unit.game_speed[0];
    led[3] = game_unit.game_speed[1];
    led[4] = game_unit.song_speed_ok_debug[0];
    
    
    io_led[0][0] = game_unit.speaker;
    //io_led[1][1:0] = game_unit.song_number;
    //io_led[1][7:6] = game_unit.game_speed[1:0];
    io_led[1] = game_unit.song_debug[7:0];
}
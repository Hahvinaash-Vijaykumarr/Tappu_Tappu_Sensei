module au_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input usb_rx,           // USB->Serial input
    output usb_tx,          // USB->Serial output
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield (ANODE)
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8]     // DIP switches on IO Shield
  ) {
  
  sig rst;
  //alu alu;

  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    dff address_a[4](.rst(rst));
    dff address_b[4](.rst(rst));
    dff address_write[4](.rst(rst));
    dff data[16](.rst(rst));
    dff we[1](.rst(rst));
    //dff alufn[6](.rst(rst));
    button_conditioner button_conditioner[5];
    game_Regfiles regfiles(.rst(rst));
  }
  
  always {
    reset_cond.in = ~rst_n;   // input raw inverted reset signal
    rst = reset_cond.out;     // conditioned reset
    button_conditioner.in = io_button[4:0];
    
    led = c{3b0, io_button};  // connect buttons to LEDs to see which button is pressed
    
    usb_tx = usb_rx;          // loop serial port
    
    io_seg = 8b0; // connect segments to the driver
    io_sel = 4b1111; // turn on rightmost digit, and leftmost digit
    io_led = c{{8b0}, {8b0}, {8b0}};   
    
    //alu.a = 0;
    //alu.b = 0;
    //alu.alufn_signal = 0;
    
    regfiles.read_address_a = address_a.q;
    regfiles.read_address_b = address_b.q;
    regfiles.write_address = address_write.q;
    regfiles.data = data.q;
    regfiles.we = we.q;
    
    
    if (button_conditioner.out[0]) {  // read_address_a
      address_a.d = io_dip[0][3:0];
    }
    
    if (button_conditioner.out[1]) {  // read_address_b
      address_b.d = io_dip[0][3:0];
    }
    
    if (button_conditioner.out[2]) {  // write_address
      address_write.d = io_dip[0][3:0];
    }
    
    if (button_conditioner.out[3]) {  // data in
      data.d = c{io_dip[2], io_dip[1]};
    }
    
    if (button_conditioner.out[4]) {  // write enable
      we.d = io_dip[0][7];
    }
    
    if (io_dip[0][6]) {  // flip up to read_b else read_a
      io_led = c{{8b0}, {regfiles.out_b[15:8]}, {regfiles.out_b[7:0]}};
    }
    else if (~io_dip[0][6]) {
      io_led = c{{8b0}, {regfiles.out_a[15:8]}, {regfiles.out_a[7:0]}};
    
    
    
}
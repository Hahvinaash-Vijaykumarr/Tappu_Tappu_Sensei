module alu (
    input a[16],
    input b[16],
    input alufn_signal[6],
    output out[16],
    output z,
    output v,
    output n
  ) {
  adder adder;
  boolean boolean;
  shifter shifter;
  compare compare; 
  multiplier multiplier;
  sig arith[16];
  
  always {
    z = 0;
    v = 0;
    n = 0;
    out = 0;
    
    adder.a = 0;
    adder.b = 0;
    adder.alufn_signal = 0;
    
    boolean.a = 0;
    boolean.b = 0;
    boolean.alufn_signal = 0;
    
    shifter.a = 0;
    shifter.b = 0;
    shifter.alufn_signal = 0;
    
    compare.z = 0;
    compare.v = 0;
    compare.n = 0;
    compare.alufn_signal = 0;
    
    multiplier.a = 0;
    multiplier.b = 0;
    
    adder.a = a;
    adder.b = b;
    adder.alufn_signal = alufn_signal;
    z = adder.z;
    v = adder.v;
    n = adder.n;
    
    multiplier.a = a;
    multiplier.b = b;
    
    boolean.a = a;
    boolean.b = b;
    boolean.alufn_signal = alufn_signal;
    
    shifter.a = a;
    shifter.b = b[3:0];
    shifter.alufn_signal = alufn_signal;
    
    compare.z = adder.z;
    compare.v = adder.v;
    compare.n = adder.n;
    compare.alufn_signal = alufn_signal;
    
    // output
    arith = adder.out;
    if (alufn_signal[1]) {
      arith = multiplier.mul;
    }

    case (alufn_signal[5:4]) {
      b00: out = arith;
      b01: out = boolean.bool;
      b10: out = shifter.shift;
      b11: out = c{15x{b0}, compare.cmp};
      default:
        out = 16b0;
    }
  }
}
module tester (
    input clk,  // clock
    input rst,  // reset
    input invalid,  // invalid input / restart tester
    input start,  // start auto tester
        
    output out[16],
    output z,
    output v,
    output n,
    output true,
    output io_seg[8],
    output io_sel[4]
  ) {
  alu alu;
  var ans;
  sig result[16];
  
  counter slowclock(#SIZE(1), #DIV(27), .clk(clk), .rst(rst));
  fsm test(.clk(slowclock.value), .rst(rst)) = {
    START,
    ADD1, ADD2, ADD3, ADD4, ADD5,
    SUB1, SUB2, SUB3, SUB4, SUB5,
    MUL1, MUL2, MUL3, MUL4, MUL5,
    AND1, AND2, AND3, AND4, AND5,
    OR1, OR2, OR3, OR4,
    XOR1, XOR2, XOR3, XOR4,
    A1, A2,
    SHL1, SHL2, SHL3,
    SHR1, SHR2, SHR3,
    SRA1, SRA2, SRA3,
    CMPEQ1, CMPEQ2 ,CMPEQ3,
    CMPLT1, CMPLT2, CMPLT3, CMPLT4, CMPLT5,
    CMPLE1, CMPLE2, CMPLE3, CMPLE4,
    DONE};
  multi_seven_seg seg(.clk(clk), .rst(rst));
    
  always {
    // default values
    out = 0;
    z = 0;
    v = 0;
    n = 0;
    alu.a = 0;
    alu.b = 0;
    alu.alufn_signal = 0;
    seg.values = {5b00000, 5b00000, 5b00000, 5b00000};
    io_seg = 0;
    io_sel = 0;
    
    true = 0;
    result = 0;
    
    case (test.q) {
      // waiting to start auto tester
      test.START:
        result = 0;
        z = 0;
        v = 0;
        n = 0;
        seg.values = {5b00000, 5b00000, 5b00000, 5b00000};
        io_seg = 0;
        io_sel = 0;
        if (start) {
          test.d = test.ADD1;
        }
        
    
      // add test
      test.ADD1:  // a + 0
        alu.a = 16b0000000011110000;
        alu.b = 16b0000000000000000;
        alu.alufn_signal = 6b000000;
        ans = 16b0000000011110000;
        z = alu.z;
        v = alu.v;
        n = alu.n;
        
        if (invalid) {
          result = c{alu.out[15:1], ~alu.out[0]};
          seg.values = {5b10001, 5b00000, 5b01001, 5b00001};
          io_seg = seg.seg;
          io_sel = seg.sel;
        }
        else {
          result = alu.out;
          seg.values = {5b10000, 5b00000, 5b01001, 5b00001};
          io_seg = seg.seg;
          io_sel = seg.sel;
        }
        
        if (result == ans) {
          true = 1;
          test.d = test.ADD2;
        }
        else {
          true = 0;
        }
        
        
      test.ADD2:  // 0 + b
        alu.a = 16b0000000000000000;
        alu.b = 16b0000000000001111;
        alu.alufn_signal = 6b000000;
        ans = 16b0000000000001111;
        z = alu.z;
        v = alu.v;
        n = alu.n;
        
        if (invalid) {
          result = c{alu.out[15:1], ~alu.out[0]};
          seg.values = {5b10001, 5b00000, 5b01001, 5b00010};
          io_seg = seg.seg;
          io_sel = seg.sel;
        }
        else {
          result = alu.out;
          seg.values = {5b10000, 5b00000, 5b01001, 5b00010};
          io_seg = seg.seg;
          io_sel = seg.sel;
        }
        
        if (result == ans) {
          true = 1;
          test.d = test.ADD3;
        }
        else {
          true = 0;
        }
        
        
      test.ADD3:
        alu.a = 16b0000010101010101;
        alu.b = 16b0000001010101010;
        alu.alufn_signal = 6b000000;
        ans = 16b0000011111111111;
        z = alu.z;
        v = alu.v;
        n = alu.n;
        
        if (invalid) {
          result = c{alu.out[15:1], ~alu.out[0]};
          seg.values = {5b10001, 5b00000, 5b01001, 5b00011};
          io_seg = seg.seg;
          io_sel = seg.sel;
        }
        else {
          result = alu.out;
          seg.values = {5b10000, 5b00000, 5b01001, 5b00011};
          io_seg = seg.seg;
          io_sel = seg.sel;
        }
        
        if (result == ans) {
          true = 1;
          test.d = test.ADD4;
        }
        else {
          true = 0;
        }
        
        
      test.ADD4:  // overflow
        alu.a = 16b0110000010000000;
        alu.b = 16b0110101010101111;
        alu.alufn_signal = 6b000000;
        ans = 16b1100101100101111;
        z = alu.z;
        v = alu.v;
        n = alu.n;
        
        if (invalid) {
          result = c{alu.out[15:1], ~alu.out[0]};
          seg.values = {5b10001, 5b00000, 5b01001, 5b00100};
          io_seg = seg.seg;
          io_sel = seg.sel;
        }
        else {
          result = alu.out;
          seg.values = {5b10000, 5b00000, 5b01001, 5b00100};
          io_seg = seg.seg;
          io_sel = seg.sel;
        }
        
        if (result == ans) {
          true = 1;
          test.d = test.ADD5;
        }
        else {
          true = 0;
        }
        
        
      test.ADD5:
        alu.a = 16b0000001011111011;
        alu.b = 16b0100000111101111;
        alu.alufn_signal = 6b000000;
        ans = 16b0100010011101010;
        z = alu.z;
        v = alu.v;
        n = alu.n;
        
        if (invalid) {
          result = c{alu.out[15:1], ~alu.out[0]};
          seg.values = {5b10001, 5b00000, 5b01001, 5b00101};
          io_seg = seg.seg;
          io_sel = seg.sel;
        }
        else {
          result = alu.out;
          seg.values = {5b10000, 5b00000, 5b01001, 5b00101};
          io_seg = seg.seg;
          io_sel = seg.sel;
        }
        
        if (result == ans) {
          true = 1;
          test.d = test.SUB1;
        }
        else {
          true = 0;
        }
        
      // subtract test
      test.SUB1:  // a - 0
        alu.a = 16b0000111100000000;
        alu.b = 16b0000000000000000;
        alu.alufn_signal = 6b000001;
        ans = 16b0000111100000000;
        z = alu.z;
        v = alu.v;
        n = alu.n;
        
        if (invalid) {
          result = c{alu.out[15:1], ~alu.out[0]};
          seg.values = {5b10001, 5b00000, 5b01010, 5b00001};
          io_seg = seg.seg;
          io_sel = seg.sel;
        }
        else {
          result = alu.out;
          seg.values = {5b10000, 5b00000, 5b01010, 5b00001};
          io_seg = seg.seg;
          io_sel = seg.sel;
        }
        
        if (result == ans) {
          true = 1;
          test.d = test.SUB2;
        }
        else {
          true = 0;
        }
        
        
      test.SUB2:  // 0 - b
        alu.a = 16b0000000000000000;
        alu.b = 16b0000000000000001;
        alu.alufn_signal = 6b000001;
        ans = 16b1111111111111111;
        z = alu.z;
        v = alu.v;
        n = alu.n;
        
        if (invalid) {
          result = c{alu.out[15:1], ~alu.out[0]};
          seg.values = {5b10001, 5b00000, 5b01010, 5b00010};
          io_seg = seg.seg;
          io_sel = seg.sel;
        }
        else {
          result = alu.out;
          seg.values = {5b10000, 5b00000, 5b01010, 5b00010};
          io_seg = seg.seg;
          io_sel = seg.sel;
        }
        
        if (result == ans) {
          true = 1;
          test.d = test.SUB3;
        }
        else {
          true = 0;
        }
        
        
      test.SUB3:  // underflow
        alu.a = 16b0000000011110000;
        alu.b = 16b0111100000000000;
        alu.alufn_signal = 6b000001;
        ans = 16b1000100011110000;
        z = alu.z;
        v = alu.v;
        n = alu.n;
        
        if (invalid) {
          result = c{alu.out[15:1], ~alu.out[0]};
          seg.values = {5b10001, 5b00000, 5b01010, 5b00011};
          io_seg = seg.seg;
          io_sel = seg.sel;
        }
        else {
          result = alu.out;
          seg.values = {5b10000, 5b00000, 5b01010, 5b00011};
          io_seg = seg.seg;
          io_sel = seg.sel;
        }
        
        if (result == ans) {
          true = 1;
          test.d = test.SUB4;
        }
        else {
          true = 0;
        }
        
        
      test.SUB4:  // max positive - 0
        alu.a = 16b0000000000000000;
        alu.b = 16b0111111111111111;
        alu.alufn_signal = 6b000001;
        ans = 16b1000000000000001;
        z = alu.z;
        v = alu.v;
        n = alu.n;
        
        if (invalid) {
          result = c{alu.out[15:1], ~alu.out[0]};
          seg.values = {5b10001, 5b00000, 5b01010, 5b00100};
          io_seg = seg.seg;
          io_sel = seg.sel;
        }
        else {
          result = alu.out;
          seg.values = {5b10000, 5b00000, 5b01010, 5b00100};
          io_seg = seg.seg;
          io_sel = seg.sel;
        }
        
        if (result == ans) {
          true = 1;
          test.d = test.SUB5;
        }
        else {
          true = 0;
        }
        
        
      test.SUB5:  // negative - negative
        alu.a = 16b1111000000000000;
        alu.b = 16b1111111111111000;
        alu.alufn_signal = 6b000001;
        ans = 16b1111000000001000;
        z = alu.z;
        v = alu.v;
        n = alu.n;
        
        if (invalid) {
          result = c{alu.out[15:1], ~alu.out[0]};
          seg.values = {5b10001, 5b00000, 5b01010, 5b00101};
          io_seg = seg.seg;
          io_sel = seg.sel;
        }
        else {
          result = alu.out;
          seg.values = {5b10000, 5b00000, 5b01010, 5b00101};
          io_seg = seg.seg;
          io_sel = seg.sel;
        }
        
        if (result == ans) {
          true = 1;
          test.d = test.MUL1;
        }
        else {
          true = 0;
        }
        
      // multiply test
      test.MUL1:  // 0 x b
        alu.a = 16b0000000000000000;
        alu.b = 16b0111100111111111;
        alu.alufn_signal = 6b000010;
        ans = 16b0000000000000000;
        z = alu.z;
        v = alu.v;
        n = alu.n;
        
        if (invalid) {
          result = c{alu.out[15:1], ~alu.out[0]};
          seg.values = {5b10001, 5b00000, 5b01011, 5b00001};
          io_seg = seg.seg;
          io_sel = seg.sel;
        }
        else {
          result = alu.out;
          seg.values = {5b10000, 5b00000, 5b01011, 5b00001};
          io_seg = seg.seg;
          io_sel = seg.sel;
        }
        
        if (result == ans) {
          true = 1;
          test.d = test.MUL2;
        }
        else {
          true = 0;
        }
        
        
      test.MUL2:  // a x 1
        alu.a = 16b0111100111111111;
        alu.b = 16b0000000000000001;
        alu.alufn_signal = 6b000010;
        ans = 16b0111100111111111;
        z = alu.z;
        v = alu.v;
        n = alu.n;
        
        if (invalid) {
          result = c{alu.out[15:1], ~alu.out[0]};
          seg.values = {5b10001, 5b00000, 5b01011, 5b00010};
          io_seg = seg.seg;
          io_sel = seg.sel;
        }
        else {
          result = alu.out;
          seg.values = {5b10000, 5b00000, 5b01011, 5b00010};
          io_seg = seg.seg;
          io_sel = seg.sel;
        }
        
        if (result == ans) {
          true = 1;
          test.d = test.MUL3;
        }
        else {
          true = 0;
        }
        
        
      test.MUL3:
        alu.a = 16b0000000000011000;
        alu.b = 16b0000000001100000;
        alu.alufn_signal = 6b000010;
        ans = 16b0000100100000000;
        z = alu.z;
        v = alu.v;
        n = alu.n;
        
        if (invalid) {
          result = c{alu.out[15:1], ~alu.out[0]};
          seg.values = {5b10001, 5b00000, 5b01011, 5b00011};
          io_seg = seg.seg;
          io_sel = seg.sel;
        }
        else {
          result = alu.out;
          seg.values = {5b10000, 5b00000, 5b01011, 5b00011};
          io_seg = seg.seg;
          io_sel = seg.sel;
        }
        
        if (result == ans) {
          true = 1;
          test.d = test.MUL4;
        }
        else {
          true = 0;
        }
        
        
      test.MUL4:  // overflow
        alu.a = 16b0111100000001000;
        alu.b = 16b0101010100000000;
        alu.alufn_signal = 6b000010;
        ans = 16b1010100000000000;
        z = alu.z;
        v = alu.v;
        n = alu.n;
        
        if (invalid) {
          result = c{alu.out[15:1], ~alu.out[0]};
          seg.values = {5b10001, 5b00000, 5b01011, 5b00100};
          io_seg = seg.seg;
          io_sel = seg.sel;
        }
        else {
          result = alu.out;
          seg.values = {5b10000, 5b00000, 5b01011, 5b00100};
          io_seg = seg.seg;
          io_sel = seg.sel;
        }
        
        if (result == ans) {
          true = 1;
          test.d = test.MUL5;
        }
        else {
          true = 0;
        }
        
        
      test.MUL5:  // negative
        alu.a = 16b0000000000000010;
        alu.b = 16b1111111111111111;
        alu.alufn_signal = 6b000010;
        ans = 16b1111111111111110;
        z = alu.z;
        v = alu.v;
        n = alu.n;
        
        if (invalid) {
          result = c{alu.out[15:1], ~alu.out[0]};
          seg.values = {5b10001, 5b00000, 5b01011, 5b00101};
          io_seg = seg.seg;
          io_sel = seg.sel;
        }
        else {
          result = alu.out;
          seg.values = {5b10000, 5b00000, 5b01011, 5b00101};
          io_seg = seg.seg;
          io_sel = seg.sel;
        }
        
        if (result == ans) {
          true = 1;
          test.d = test.AND1;
        }
        else {
          true = 0;
        }
        
      // and test
      test.AND1:  // a and 0
        alu.a = 16b0001010100010100;
        alu.b = 16b0000000000000000;
        alu.alufn_signal = 6b011000;
        ans = 16b0000000000000000;
        z = alu.z;
        v = alu.v;
        n = alu.n;
        
        if (invalid) {
          result = c{alu.out[15:1], ~alu.out[0]};
          seg.values = {5b10001, 5b00001, 5b01000, 5b00001};
          io_seg = seg.seg;
          io_sel = seg.sel;
        }
        else {
          result = alu.out;
          seg.values = {5b10000, 5b00001, 5b01000, 5b00001};
          io_seg = seg.seg;
          io_sel = seg.sel;
        }
        
        if (result == ans) {
          true = 1;
          test.d = test.AND2;
        }
        else {
          true = 0;
        }
        
        
      test.AND2:  // a and 0xFFFF
        alu.a = 16b0001010100010100;
        alu.b = 16b1111111111111111;
        alu.alufn_signal = 6b011000;
        ans = 16b0001010100010100;
        z = alu.z;
        v = alu.v;
        n = alu.n;
        
        if (invalid) {
          result = c{alu.out[15:1], ~alu.out[0]};
          seg.values = {5b10001, 5b00001, 5b01000, 5b00010};
          io_seg = seg.seg;
          io_sel = seg.sel;
        }
        else {
          result = alu.out;
          seg.values = {5b10000, 5b00001, 5b01000, 5b00010};
          io_seg = seg.seg;
          io_sel = seg.sel;
        }
        
        if (result == ans) {
          true = 1;
          test.d = test.AND3;
        }
        else {
          true = 0;
        }
        
        
      test.AND3:  // a and a
        alu.a = 16b0001110011010101;
        alu.b = 16b0001110011010101;
        alu.alufn_signal = 6b011000;
        ans = 16b0001110011010101;
        z = alu.z;
        v = alu.v;
        n = alu.n;
        
        if (invalid) {
          result = c{alu.out[15:1], ~alu.out[0]};
          seg.values = {5b10001, 5b00001, 5b01000, 5b00011};
          io_seg = seg.seg;
          io_sel = seg.sel;
        }
        else {
          result = alu.out;
          seg.values = {5b10000, 5b00001, 5b01000, 5b00011};
          io_seg = seg.seg;
          io_sel = seg.sel;
        }
        
        if (result == ans) {
          true = 1;
          test.d = test.AND4;
        }
        else {
          true = 0;
        }
        
        
      test.AND4:  // a and not a
        alu.a = 16b0000111100001111;
        alu.b = 16b1111000011110000;
        alu.alufn_signal = 6b011000;
        ans = 16b0000000000000000;
        z = alu.z;
        v = alu.v;
        n = alu.n;
        
        if (invalid) {
          result = c{alu.out[15:1], ~alu.out[0]};
          seg.values = {5b10001, 5b00001, 5b01000, 5b00100};
          io_seg = seg.seg;
          io_sel = seg.sel;
        }
        else {
          result = alu.out;
          seg.values = {5b10000, 5b00001, 5b01000, 5b00100};
          io_seg = seg.seg;
          io_sel = seg.sel;
        }
        
        if (result == ans) {
          true = 1;
          test.d = test.AND5;
        }
        else {
          true = 0;
        }
        
        
      test.AND5:  
        alu.a = 16b0000111100001111;
        alu.b = 16b0101010101001010;
        alu.alufn_signal = 6b011000;
        ans = 16b0000010100001010;
        z = alu.z;
        v = alu.v;
        n = alu.n;
        
        if (invalid) {
          result = c{alu.out[15:1], ~alu.out[0]};
          seg.values = {5b10001, 5b00001, 5b01000, 5b00101};
          io_seg = seg.seg;
          io_sel = seg.sel;
        }
        else {
          result = alu.out;
          seg.values = {5b10000, 5b00001, 5b01000, 5b00101};
          io_seg = seg.seg;
          io_sel = seg.sel;
        }
        
        if (result == ans) {
          true = 1;
          test.d = test.OR1;
        }
        else {
          true = 0;
        }
        
      // or test
      test.OR1:  // a or 0
        alu.a = 16b0000111100001111;
        alu.b = 16b0000000000000000;
        alu.alufn_signal = 6b011110;
        ans = 16b0000111100001111;
        z = alu.z;
        v = alu.v;
        n = alu.n;
        
        if (invalid) {
          result = c{alu.out[15:1], ~alu.out[0]};
          seg.values = {5b10001, 5b00001, 5b01100, 5b00001};
          io_seg = seg.seg;
          io_sel = seg.sel;
        }
        else {
          result = alu.out;
          seg.values = {5b10000, 5b00001, 5b01100, 5b00001};
          io_seg = seg.seg;
          io_sel = seg.sel;
        }
        
        if (result == ans) {
          true = 1;
          test.d = test.OR2;
        }
        else {
          true = 0;
        }
        
        
      test.OR2:  // a or 0xFFFF
        alu.a = 16b0000111100001111;
        alu.b = 16b1111111111111111;
        alu.alufn_signal = 6b011110;
        ans = 16b1111111111111111;
        z = alu.z;
        v = alu.v;
        n = alu.n;
        
        if (invalid) {
          result = c{alu.out[15:1], ~alu.out[0]};
          seg.values = {5b10001, 5b00001, 5b01100, 5b00010};
          io_seg = seg.seg;
          io_sel = seg.sel;
        }
        else {
          result = alu.out;
          seg.values = {5b10000, 5b00001, 5b01100, 5b00010};
          io_seg = seg.seg;
          io_sel = seg.sel;
        }
        
        if (result == ans) {
          true = 1;
          test.d = test.OR3;
        }
        else {
          true = 0;
        }
        
        
      test.OR3:  // a or a
        alu.a = 16b0000111100001111;
        alu.b = 16b0000111100001111;
        alu.alufn_signal = 6b011110;
        ans = 16b0000111100001111;
        z = alu.z;
        v = alu.v;
        n = alu.n;
        
        if (invalid) {
          result = c{alu.out[15:1], ~alu.out[0]};
          seg.values = {5b10001, 5b00001, 5b01100, 5b00011};
          io_seg = seg.seg;
          io_sel = seg.sel;
        }
        else {
          result = alu.out;
          seg.values = {5b10000, 5b00001, 5b01100, 5b00011};
          io_seg = seg.seg;
          io_sel = seg.sel;
        }
        
        if (result == ans) {
          true = 1;
          test.d = test.OR4;
        }
        else {
          true = 0;
        }
        
        
      test.OR4:
        alu.a = 16b0000111100001111;
        alu.b = 16b1110100011110000;
        alu.alufn_signal = 6b011110;
        ans = 16b1110111111111111;
        z = alu.z;
        v = alu.v;
        n = alu.n;
        
        if (invalid) {
          result = c{alu.out[15:1], ~alu.out[0]};
          seg.values = {5b10001, 5b00001, 5b01100, 5b00100};
          io_seg = seg.seg;
          io_sel = seg.sel;
        }
        else {
          result = alu.out;
          seg.values = {5b10000, 5b00001, 5b01100, 5b00100};
          io_seg = seg.seg;
          io_sel = seg.sel;
        }
        
        if (result == ans) {
          true = 1;
          test.d = test.XOR1;
        }
        else {
          true = 0;
        }
        
      // xor test
      test.XOR1:  // a xor 0
        alu.a = 16b0000111100001111;
        alu.b = 16b0000000000000000;
        alu.alufn_signal = 6b010110;
        ans = 16b0000111100001111;
        z = alu.z;
        v = alu.v;
        n = alu.n;
        
        if (invalid) {
          result = c{alu.out[15:1], ~alu.out[0]};
          seg.values = {5b10001, 5b00001, 5b00110, 5b00001};
          io_seg = seg.seg;
          io_sel = seg.sel;
        }
        else {
          result = alu.out;
          seg.values = {5b10000, 5b00001, 5b00110, 5b00001};
          io_seg = seg.seg;
          io_sel = seg.sel;
        }
        
        if (result == ans) {
          true = 1;
          test.d = test.XOR2;
        }
        else {
          true = 0;
        }
        
        
      test.XOR2:  // a xor a
        alu.a = 16b0000111100001111;
        alu.b = 16b0000111100001111;
        alu.alufn_signal = 6b010110;
        ans = 16b0000000000000000;
        z = alu.z;
        v = alu.v;
        n = alu.n;
        
        if (invalid) {
          result = c{alu.out[15:1], ~alu.out[0]};
          seg.values = {5b10001, 5b00001, 5b00110, 5b00010};
          io_seg = seg.seg;
          io_sel = seg.sel;
        }
        else {
          result = alu.out;
          seg.values = {5b10000, 5b00001, 5b00110, 5b00010};
          io_seg = seg.seg;
          io_sel = seg.sel;
        }
        
        if (result == ans) {
          true = 1;
          test.d = test.XOR3;
        }
        else {
          true = 0;
        }
        
        
      test.XOR3:  // a xor not a
        alu.a = 16b0000111100001111;
        alu.b = 16b1111000011110000;
        alu.alufn_signal = 6b010110;
        ans = 16b1111111111111111;
        z = alu.z;
        v = alu.v;
        n = alu.n;
        
        if (invalid) {
          result = c{alu.out[15:1], ~alu.out[0]};
          seg.values = {5b10001, 5b00001, 5b00110, 5b00011};
          io_seg = seg.seg;
          io_sel = seg.sel;
        }
        else {
          result = alu.out;
          seg.values = {5b10000, 5b00001, 5b00110, 5b00011};
          io_seg = seg.seg;
          io_sel = seg.sel;
        }
        
        if (result == ans) {
          true = 1;
          test.d = test.XOR4;
        }
        else {
          true = 0;
        }
        
        
      test.XOR4:
        alu.a = 16b0000111100001111;
        alu.b = 16b1010010110100111;
        alu.alufn_signal = 6b010110;
        ans = 16b1010101010101000;
        z = alu.z;
        v = alu.v;
        n = alu.n;
        
        if (invalid) {
          result = c{alu.out[15:1], ~alu.out[0]};
          seg.values = {5b10001, 5b00001, 5b00110, 5b00100};
          io_seg = seg.seg;
          io_sel = seg.sel;
        }
        else {
          result = alu.out;
          seg.values = {5b10000, 5b00001, 5b00110, 5b00100};
          io_seg = seg.seg;
          io_sel = seg.sel;
        }
        
        if (result == ans) {
          true = 1;
          test.d = test.A1;
        }
        else {
          true = 0;
        }
        
      // "A" test
      test.A1:
        alu.a = 16b0000111100001111;
        alu.b = 16b1010010110100111;
        alu.alufn_signal = 6b011010;
        ans = 16b0000111100001111;
        z = alu.z;
        v = alu.v;
        n = alu.n;
        
        if (invalid) {
          result = c{alu.out[15:1], ~alu.out[0]};
          seg.values = {5b10001, 5b00001, 5b01101, 5b00001};
          io_seg = seg.seg;
          io_sel = seg.sel;
        }
        else {
          result = alu.out;
          seg.values = {5b10000, 5b00001, 5b01101, 5b00001};
          io_seg = seg.seg;
          io_sel = seg.sel;
        }
        
        if (result == ans) {
          true = 1;
          test.d = test.A2;
        }
        else {
          true = 0;
        }
        
        
      test.A2:
        alu.a = 16b1001010101101010;
        alu.b = 16b1111111111111111;
        alu.alufn_signal = 6b011010;
        ans = 16b1001010101101010;
        z = alu.z;
        v = alu.v;
        n = alu.n;
        
        if (invalid) {
          result = c{alu.out[15:1], ~alu.out[0]};
          seg.values = {5b10001, 5b00001, 5b01101, 5b00010};
          io_seg = seg.seg;
          io_sel = seg.sel;
        }
        else {
          result = alu.out;
          seg.values = {5b10000, 5b00001, 5b01101, 5b00010};
          io_seg = seg.seg;
          io_sel = seg.sel;
        }
        
        if (result == ans) {
          true = 1;
          test.d = test.SHL1;
        }
        else {
          true = 0;
        }
        
      // shift left tester
      test.SHL1:  // shift a by 0
        alu.a = 16b0000000000001100;
        alu.b = 16b0000000000000000;
        alu.alufn_signal = 6b100000;
        ans = 16b0000000000001100;
        z = alu.z;
        v = alu.v;
        n = alu.n;
        
        if (invalid) {
          result = c{alu.out[15:1], ~alu.out[0]};
          seg.values = {5b10001, 5b00010, 5b01001, 5b00001};
          io_seg = seg.seg;
          io_sel = seg.sel;
        }
        else {
          result = alu.out;
          seg.values = {5b10000, 5b00010, 5b01001, 5b00001};
          io_seg = seg.seg;
          io_sel = seg.sel;
        }
        
        if (result == ans) {
          true = 1;
          test.d = test.SHL2;
        }
        else {
          true = 0;
        }
        
        
      test.SHL2:  // shift maximum
        alu.a = 16b0000000000000001;
        alu.b = 16b0000000000001111;
        alu.alufn_signal = 6b100000;
        ans = 16b1000000000000000;
        z = alu.z;
        v = alu.v;
        n = alu.n;
        
        if (invalid) {
          result = c{alu.out[15:1], ~alu.out[0]};
          seg.values = {5b10001, 5b00010, 5b01001, 5b00010};
          io_seg = seg.seg;
          io_sel = seg.sel;
        }
        else {
          result = alu.out;
          seg.values = {5b10000, 5b00010, 5b01001, 5b00010};
          io_seg = seg.seg;
          io_sel = seg.sel;
        }
        
        if (result == ans) {
          true = 1;
          test.d = test.SHL3;
        }
        else {
          true = 0;
        }
        
        
      test.SHL3:
        alu.a = 16b0000000010010011;
        alu.b = 16b0000000000000101;
        alu.alufn_signal = 6b100000;
        ans = 16b0001001001100000;
        z = alu.z;
        v = alu.v;
        n = alu.n;
        
        if (invalid) {
          result = c{alu.out[15:1], ~alu.out[0]};
          seg.values = {5b10001, 5b00010, 5b01001, 5b00011};
          io_seg = seg.seg;
          io_sel = seg.sel;
        }
        else {
          result = alu.out;
          seg.values = {5b10000, 5b00010, 5b01001, 5b00011};
          io_seg = seg.seg;
          io_sel = seg.sel;
        }
        
        if (result == ans) {
          true = 1;
          test.d = test.SHR1;
        }
        else {
          true = 0;
        }
        
      // shift right test
      test.SHR1:  // shift a by 0
        alu.a = 16b0000000010010011;
        alu.b = 16b0000000000000000;
        alu.alufn_signal = 6b100001;
        ans = 16b0000000010010011;
        z = alu.z;
        v = alu.v;
        n = alu.n;
        
        if (invalid) {
          result = c{alu.out[15:1], ~alu.out[0]};
          seg.values = {5b10001, 5b00010, 5b01010, 5b00001};
          io_seg = seg.seg;
          io_sel = seg.sel;
        }
        else {
          result = alu.out;
          seg.values = {5b10000, 5b00010, 5b01010, 5b00001};
          io_seg = seg.seg;
          io_sel = seg.sel;
        }
        
        if (result == ans) {
          true = 1;
          test.d = test.SHR2;
        }
        else {
          true = 0;
        }
        
        
      test.SHR2:  // shift maximum
        alu.a = 16b0100000000000000;
        alu.b = 16b0000000000001110;
        alu.alufn_signal = 6b100001;
        ans = 16b0000000000000001;
        z = alu.z;
        v = alu.v;
        n = alu.n;
        
        if (invalid) {
          result = c{alu.out[15:1], ~alu.out[0]};
          seg.values = {5b10001, 5b00010, 5b01010, 5b00010};
          io_seg = seg.seg;
          io_sel = seg.sel;
        }
        else {
          result = alu.out;
          seg.values = {5b10000, 5b00010, 5b01010, 5b00010};
          io_seg = seg.seg;
          io_sel = seg.sel;
        }
        
        if (result == ans) {
          true = 1;
          test.d = test.SHR3;
        }
        else {
          true = 0;
        }
        
        
      test.SHR3:
        alu.a = 16b0100011001010100;
        alu.b = 16b0000000000001000;
        alu.alufn_signal = 6b100001;
        ans = 16b0000000001000110;
        z = alu.z;
        v = alu.v;
        n = alu.n;
        
        if (invalid) {
          result = c{alu.out[15:1], ~alu.out[0]};
          seg.values = {5b10001, 5b00010, 5b01010, 5b00011};
          io_seg = seg.seg;
          io_sel = seg.sel;
        }
        else {
          result = alu.out;
          seg.values = {5b10000, 5b00010, 5b01010, 5b00011};
          io_seg = seg.seg;
          io_sel = seg.sel;
        }
        
        if (result == ans) {
          true = 1;
          test.d = test.SRA1;
        }
        else {
          true = 0;
        }
        
      // shift right with sign test
      test.SRA1:
        alu.a = 16b1000000000000000;
        alu.b = 16b0000000000001000;
        alu.alufn_signal = 6b100011;
        ans = 16b1111111110000000;
        z = alu.z;
        v = alu.v;
        n = alu.n;
        
        if (invalid) {
          result = c{alu.out[15:1], ~alu.out[0]};
          seg.values = {5b10001, 5b00010, 5b01110, 5b00001};
          io_seg = seg.seg;
          io_sel = seg.sel;
        }
        else {
          result = alu.out;
          seg.values = {5b10000, 5b00010, 5b01110, 5b00001};
          io_seg = seg.seg;
          io_sel = seg.sel;
        }
        
        if (result == ans) {
          true = 1;
          test.d = test.SRA2;
        }
        else {
          true = 0;
        }
        
        
      test.SRA2:
        alu.a = 16b1000111000010100;
        alu.b = 16b0000000000000100;
        alu.alufn_signal = 6b100011;
        ans = 16b1111100011100001;
        z = alu.z;
        v = alu.v;
        n = alu.n;
        
        if (invalid) {
          result = c{alu.out[15:1], ~alu.out[0]};
          seg.values = {5b10001, 5b00010, 5b01110, 5b00010};
          io_seg = seg.seg;
          io_sel = seg.sel;
        }
        else {
          result = alu.out;
          seg.values = {5b10000, 5b00010, 5b01110, 5b00010};
          io_seg = seg.seg;
          io_sel = seg.sel;
        }
        
        if (result == ans) {
          true = 1;
          test.d = test.SRA3;
        }
        else {
          true = 0;
        }
        
        
      test.SRA3:
        alu.a = 16b1000111000010100;
        alu.b = 16b0000000000001110;
        alu.alufn_signal = 6b100011;
        ans = 16b1111111111111110;
        z = alu.z;
        v = alu.v;
        n = alu.n;
        
        if (invalid) {
          result = c{alu.out[15:1], ~alu.out[0]};
          seg.values = {5b10001, 5b00010, 5b01110, 5b00011};
          io_seg = seg.seg;
          io_sel = seg.sel;
        }
        else {
          result = alu.out;
          seg.values = {5b10000, 5b00010, 5b01110, 5b00011};
          io_seg = seg.seg;
          io_sel = seg.sel;
        }
        
        if (result == ans) {
          true = 1;
          test.d = test.CMPEQ1;
        }
        else {
          true = 0;
        }
        
      // equal test
      test.CMPEQ1:  // a == b
        alu.a = 16b1000111000010100;
        alu.b = 16b1000111000010100;
        alu.alufn_signal = 6b110011;
        ans = 1;
        z = alu.z;
        v = alu.v;
        n = alu.n;
        
        if (invalid) {
          result = c{alu.out[15:1], ~alu.out[0]};
          seg.values = {5b10001, 5b00011, 5b01110, 5b00001};
          io_seg = seg.seg;
          io_sel = seg.sel;
        }
        else {
          result = alu.out;
          seg.values = {5b10000, 5b00011, 5b01110, 5b00001};
          io_seg = seg.seg;
          io_sel = seg.sel;
        }
        
        if (result == ans) {
          true = 1;
          test.d = test.CMPEQ2;
        }
        else {
          true = 0;
        }
        
        
      test.CMPEQ2:  // not equal
        alu.a = 16b1000111000010100;
        alu.b = 16b1000111010010100;
        alu.alufn_signal = 6b110011;
        ans = 0;
        z = alu.z;
        v = alu.v;
        n = alu.n;
        
        if (invalid) {
          result = c{alu.out[15:1], ~alu.out[0]};
          seg.values = {5b10001, 5b00011, 5b01110, 5b00010};
          io_seg = seg.seg;
          io_sel = seg.sel;
        }
        else {
          result = alu.out;
          seg.values = {5b10000, 5b00011, 5b01110, 5b00010};
          io_seg = seg.seg;
          io_sel = seg.sel;
        }
        
        if (result == ans) {
          true = 1;
          test.d = test.CMPEQ3;
        }
        else {
          true = 0;
        }
        
        
      test.CMPEQ3:  // equal
        alu.a = 16b1111010100000101;
        alu.b = 16b1111010100000101;
        alu.alufn_signal = 6b110011;
        ans = 1;
        z = alu.z;
        v = alu.v;
        n = alu.n;
        
        if (invalid) {
          result = c{alu.out[15:1], ~alu.out[0]};
          seg.values = {5b10001, 5b00011, 5b01110, 5b00011};
          io_seg = seg.seg;
          io_sel = seg.sel;
        }
        else {
          result = alu.out;
          seg.values = {5b10000, 5b00011, 5b01110, 5b00011};
          io_seg = seg.seg;
          io_sel = seg.sel;
        }
        
        if (result == ans) {
          true = 1;
          test.d = test.CMPLT1;
        }
        else {
          true = 0;
        }
        
      // less than test
      test.CMPLT1:  // a < b
        alu.a = 16b0011010100000101;
        alu.b = 16b0111010100000101;
        alu.alufn_signal = 6b110101;
        ans = 1;
        z = alu.z;
        v = alu.v;
        n = alu.n;
        
        if (invalid) {
          result = c{alu.out[15:1], ~alu.out[0]};
          seg.values = {5b10001, 5b00011, 5b01111, 5b00001};
          io_seg = seg.seg;
          io_sel = seg.sel;
        }
        else {
          result = alu.out;
          seg.values = {5b10000, 5b00011, 5b01111, 5b00001};
          io_seg = seg.seg;
          io_sel = seg.sel;
        }
        
        if (result == ans) {
          true = 1;
          test.d = test.CMPLT2;
        }
        else {
          true = 0;
        }
        
        
      test.CMPLT2:  // a == b
        alu.a = 16b0011010100000101;
        alu.b = 16b0011010100000101;
        alu.alufn_signal = 6b110101;
        ans = 0;
        z = alu.z;
        v = alu.v;
        n = alu.n;
        
        if (invalid) {
          result = c{alu.out[15:1], ~alu.out[0]};
          seg.values = {5b10001, 5b00011, 5b01111, 5b00010};
          io_seg = seg.seg;
          io_sel = seg.sel;
        }
        else {
          result = alu.out;
          seg.values = {5b10000, 5b00011, 5b01111, 5b00010};
          io_seg = seg.seg;
          io_sel = seg.sel;
        }
        
        if (result == ans) {
          true = 1;
          test.d = test.CMPLT3;
        }
        else {
          true = 0;
        }
        
        
      test.CMPLT3:  // a > b
        alu.a = 16b0111010100000101;
        alu.b = 16b0011010100000101;
        alu.alufn_signal = 6b110101;
        ans = 0;
        z = alu.z;
        v = alu.v;
        n = alu.n;
        
        if (invalid) {
          result = c{alu.out[15:1], ~alu.out[0]};
          seg.values = {5b10001, 5b00011, 5b01111, 5b00011};
          io_seg = seg.seg;
          io_sel = seg.sel;
        }
        else {
          result = alu.out;
          seg.values = {5b10000, 5b00011, 5b01111, 5b00011};
          io_seg = seg.seg;
          io_sel = seg.sel;
        }
        
        if (result == ans) {
          true = 1;
          test.d = test.CMPLT4;
        }
        else {
          true = 0;
        }
        
        
      test.CMPLT4:  // a > b (b negative)
        alu.a = 16b0111010100000101;
        alu.b = 16b1011010100000101;
        alu.alufn_signal = 6b110101;
        ans = 0;
        z = alu.z;
        v = alu.v;
        n = alu.n;
        
        if (invalid) {
          result = c{alu.out[15:1], ~alu.out[0]};
          seg.values = {5b10001, 5b00011, 5b01111, 5b00100};
          io_seg = seg.seg;
          io_sel = seg.sel;
        }
        else {
          result = alu.out;
          seg.values = {5b10000, 5b00011, 5b01111, 5b00100};
          io_seg = seg.seg;
          io_sel = seg.sel;
        }
        
        if (result == ans) {
          true = 1;
          test.d = test.CMPLT5;
        }
        else {
          true = 0;
        }
        
        
      test.CMPLT5:  // a < b (both negative)
        alu.a = 16b1100010101010000;
        alu.b = 16b1111111111111100;
        alu.alufn_signal = 6b110101;
        ans = 1;
        z = alu.z;
        v = alu.v;
        n = alu.n;
        
        if (invalid) {
          result = c{alu.out[15:1], ~alu.out[0]};
          seg.values = {5b10001, 5b00011, 5b01111, 5b00101};
          io_seg = seg.seg;
          io_sel = seg.sel;
        }
        else {
          result = alu.out;
          seg.values = {5b10000, 5b00011, 5b01111, 5b00101};
          io_seg = seg.seg;
          io_sel = seg.sel;
        }
        
        if (result == ans) {
          true = 1;
          test.d = test.CMPLE1;
        }
        else {
          true = 0;
        }
        
      // less than/equal test
      test.CMPLE1:  // a < b (a negative, b positive)
        alu.a = 16b1100010101010000;
        alu.b = 16b0101011010000000;
        alu.alufn_signal = 6b110111;
        ans = 1;
        z = alu.z;
        v = alu.v;
        n = alu.n;
        
        if (invalid) {
          result = c{alu.out[15:1], ~alu.out[0]};
          seg.values = {5b10001, 5b00011, 5b00111, 5b00001};
          io_seg = seg.seg;
          io_sel = seg.sel;
        }
        else {
          result = alu.out;
          seg.values = {5b10000, 5b00011, 5b00111, 5b00001};
          io_seg = seg.seg;
          io_sel = seg.sel;
        }
        
        if (result == ans) {
          true = 1;
          test.d = test.CMPLE2;
        }
        else {
          true = 0;
        }
        
        
      test.CMPLE2:  // a == b
        alu.a = 16b0101011010000000;
        alu.b = 16b0101011010000000;
        alu.alufn_signal = 6b110111;
        ans = 1;
        z = alu.z;
        v = alu.v;
        n = alu.n;
        
        if (invalid) {
          result = c{alu.out[15:1], ~alu.out[0]};
          seg.values = {5b10001, 5b00011, 5b00111, 5b00010};
          io_seg = seg.seg;
          io_sel = seg.sel;
        }
        else {
          result = alu.out;
          seg.values = {5b10000, 5b00011, 5b00111, 5b00010};
          io_seg = seg.seg;
          io_sel = seg.sel;
        }
        
        if (result == ans) {
          true = 1;
          test.d = test.CMPLE3;
        }
        else {
          true = 0;
        }
        
        
      test.CMPLE3:  // a > b
        alu.a = 16b0111111010000000;
        alu.b = 16b0101011010000000;
        alu.alufn_signal = 6b110111;
        ans = 0;
        z = alu.z;
        v = alu.v;
        n = alu.n;
        
        if (invalid) {
          result = c{alu.out[15:1], ~alu.out[0]};
          seg.values = {5b10001, 5b00011, 5b00111, 5b00011};
          io_seg = seg.seg;
          io_sel = seg.sel;
        }
        else {
          result = alu.out;
          seg.values = {5b10000, 5b00011, 5b00111, 5b00011};
          io_seg = seg.seg;
          io_sel = seg.sel;
        }
        
        if (result == ans) {
          true = 1;
          test.d = test.CMPLE4;
        }
        else {
          true = 0;
        }
        
        
      test.CMPLE4:  // a < b (both are negative)
        alu.a = 16b1111111010000000;
        alu.b = 16b1111111111111100;
        alu.alufn_signal = 6b110111;
        ans = 1;
        z = alu.z;
        v = alu.v;
        n = alu.n;
        
        if (invalid) {
          result = c{alu.out[15:1], ~alu.out[0]};
          seg.values = {5b10001, 5b00011, 5b00111, 5b00100};
          io_seg = seg.seg;
          io_sel = seg.sel;
        }
        else {
          result = alu.out;
          seg.values = {5b10000, 5b00011, 5b00111, 5b00100};
          io_seg = seg.seg;
          io_sel = seg.sel;
        }
        
        if (result == ans) {
          true = 1;
          test.d = test.DONE;
        }
        else {
          true = 0;
        }
        
      // all tests success
      test.DONE:
        result = 0;
        z = 0;
        v = 0;
        n = 0;
        true = 0;
        seg.values = {5b10010, 5b10010, 5b10010, 5b10010};
        io_seg = seg.seg;
        io_sel = seg.sel;
        
        if (invalid) {
          test.d = test.ADD1;
        }
    }
      
    out = result;
}
